{"version":3,"sources":["../src/to-number-x.js"],"names":[],"mappings":"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","file":"to-number-x.esm.js","sourcesContent":["import isSymbol from 'is-symbol';\nimport toPrimitive from 'to-primitive-x';\nimport trim from 'trim-x';\nimport $parseInt from 'parse-int-x';\nimport NAN from 'nan-x';\n\nconst binaryRadix = 2;\nconst octalRadix = 8;\nconst testCharsCount = 2;\nconst ERROR_MESSAGE = 'Cannot convert a Symbol value to a number';\n\nconst castNumber = testCharsCount.constructor;\nconst pStrSlice = ERROR_MESSAGE.slice;\n\nconst binaryRegex = /^0b[01]+$/i;\nconst RegExpConstructor = binaryRegex.constructor;\n// Note that in IE 8, RegExp.prototype.test doesn't seem to exist: ie, \"test\" is\n// an own property of regexes. wtf.\nconst {test} = binaryRegex;\nconst isBinary = function isBinary(value) {\n  return test.call(binaryRegex, value);\n};\n\nconst octalRegex = /^0o[0-7]+$/i;\nconst isOctal = function isOctal(value) {\n  return test.call(octalRegex, value);\n};\n\nconst nonWSregex = new RegExpConstructor('[\\u0085\\u180e\\u200b\\ufffe]', 'g');\nconst hasNonWS = function hasNonWS(value) {\n  return test.call(nonWSregex, value);\n};\n\nconst invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;\nconst isInvalidHexLiteral = function isInvalidHexLiteral(value) {\n  return test.call(invalidHexLiteral, value);\n};\n\nconst assertNotSymbol = function assertNotSymbol(value) {\n  if (isSymbol(value)) {\n    throw new TypeError(ERROR_MESSAGE);\n  }\n\n  return value;\n};\n\nconst parseBase = function parseBase(value, radix) {\n  return $parseInt(pStrSlice.call(value, testCharsCount), radix);\n};\n\nconst parseString = function parseString(toNum, value) {\n  if (isBinary(value)) {\n    return toNum(parseBase(value, binaryRadix));\n  }\n\n  if (isOctal(value)) {\n    return toNum(parseBase(value, octalRadix));\n  }\n\n  return null;\n};\n\nconst convertString = function convertString(toNum, value) {\n  const val = parseString(toNum, value);\n\n  if (val !== null) {\n    return val;\n  }\n\n  if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n    return NAN;\n  }\n\n  const trimmed = trim(value);\n\n  if (trimmed !== value) {\n    return toNum(trimmed);\n  }\n\n  return null;\n};\n\n/**\n * This method converts argument to a value of type Number. (ES2019).\n *\n * @param {*} [argument] - The argument to convert to a number.\n * @throws {TypeError} - If argument is a Symbol or not coercible.\n * @returns {*} The argument converted to a number.\n */\nconst toNumber = function toNumber(argument) {\n  const value = assertNotSymbol(toPrimitive(argument, castNumber));\n\n  if (typeof value === 'string') {\n    const val = convertString(toNumber, value);\n\n    if (val !== null) {\n      return val;\n    }\n  }\n\n  return castNumber(value);\n};\n\nexport default toNumber;\n"]}